1. Проверка на вхождение строгой последовательности символов в строке, с учетом регистра:

    let testStr = "freeCodeCamp";
    let testRegex = /Code/;
    testRegex.test(testStr);

    Возвращает true или false, последовательность экранируется символами /


2. Проверка на вхождение нескольких последовательностей символов с использованием оператора ИЛИ: |
 
    let petString = "James has a pet cat.";
    let petRegex = /dog|cat|bird|fish/; // Change this line
    let result = petRegex.test(petString);

3. Флаг -i позволяет игнорировать регистр при поиске

    let myString = "freeCodeCamp";
    let fccRegex = /freecodecamp/i; // Change this line
    let result = fccRegex.test(myString);

4. Метод match() возвращает последовательность, если она есть в проверяемой строке.

    let extractStr = "Extract the word 'coding' from this string.";
    let codingRegex = /coding/; // Change this line
    let result = extractStr.match(codingRegex); // Change this line

5. Флаг -g позволяет получить все совпадения в строке. Искомой последовательности можно присвоить несколько флагов.

    let twinkleStar = "Twinkle, twinkle, little star";
    let starRegex = /twinkle/gi; // Change this line
    let result = twinkleStar.match(starRegex); // Change this line

6. Символ точки '.' означает, что на ее месте в последовательности может быть любой символ

    let exampleStr = "Let's have fun with regular expressions!";
    let unRegex = /.un/; // Change this line
    let result = unRegex.test(exampleStr);    

7. В квадратных скобках [] задается варьируемая часть последовательности

    let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
    let vowelRegex = /[aieou]/gi; // найдем все согласные любого регистра
    let result = quoteSample.match(vowelRegex); // в quoteSample

8. Набор идущих подряд варьируемых символов можно задать через [ - ]

    let quoteSample = "The quick brown fox jumps over the lazy dog.";
    let alphabetRegex = /[a-z]/gi; // ищет все буквы любого регистра
    let result = quoteSample.match(alphabetRegex); // в указанной строке

9. Таким образом можно задавать для поиска не только буквы, но и цифры, а также создавать комбинации

    let quoteSample = "Blueberry 3.141592653s are delicious.";
    let myRegex = /[h-s2-6]/gi; // ищем буквы от h до s и цифры от 2 до 6 
    let result = quoteSample.match(myRegex); // в указанной строке

10.Символ ^ в квадратных скобках [] исключает из поиска идущие после него символы

    let quoteSample = "3 blind mice.";
    let myRegex = /[^aeiou0-9]/gi; // Исключить гласные и цифры
    let result = quoteSample.match(myRegex); // из указанной строки

11. Символ + позволяет задать символы, идущие подряд

    let difficultSpelling = "Mississippi";
    let myRegex = /s+/gi; // ищем двойную s
    let result = difficultSpelling.match(myRegex);

12. Символ * задает символы, которые идут подряд или их нет вовсе

    let soccerWord = "gooooooooal!";
    let gPhrase = "gut feeling";
    let oPhrase = "over the moon";
    let goRegex = /go*/;
    soccerWord.match(goRegex);
    gPhrase.match(goRegex);
    oPhrase.match(goRegex);
    В этих случаях вернутся следующие значения: ["goooooooo"], ["g"], and null.

13. Регулярные выражения по умолчанию прнимают максимальное подходящее значение. Минимальное следует задавать вручную, с помощью символа ?
    /t[a-z]*i/ при поиске по строке titanic вернет "titani", однако /t[a-z]*?i/ вернет только "ti"


    let text = "<h1>Winter is coming</h1>";
    let myRegex = /<.*?>/; // Вернет только <h1>
    let result = text.match(myRegex);

14. Символ ^ вне квадратных скобок означает поиск последовательности символов в начале строки

    let firstString = "Ricky is first and can be found.";
    let firstRegex = /^Ricky/;
    firstRegex.test(firstString); //true
    let notFirst = "You can't find Ricky now.";
    firstRegex.test(notFirst); //false

15. Символ $ означает поиск последовательность символов в конце строки.

    let theEnding = "This is a never ending story";
    let storyRegex = /story$/;
    storyRegex.test(theEnding); //true
    let noEnding = "Sometimes a story will have to end";
    storyRegex.test(noEnding); //false
 
16. Символ \w включает в себя все буквы, цифры и нижнее подчеркивание _ ( \w = [A-Za-z0-9_] )

    let quoteSample = "The five boxing wizards jump quickly.";
    let alphabetRegexV2 = /\w/g; // используем шортхенд с флагом g, чтобы получить все подходящие значения из строки
    let result = quoteSample.match(alphabetRegexV2).length;

17. \W - обратная команда для \w, она исключает все буквы, цифры и  нижнее подчеркивание (\W = [^A-Za-z0-9])

    let shortHand = /\W/;
    let numbers = "42%"; \\returns "%"
    let sentence = "Coding!"; \\ returns "!"
    numbers.match(shortHand);
    sentence.match(shortHand);

18. Команда \d означает поиск только цифр (\d = [0-9])

    let movieName = "2001: A Space Odyssey";
    let numRegex = /\d/g; // ищем только цифры во всей строке
    let result = movieName.match(numRegex).length;

19. Команда \D исключает цифры из поиска (\D = [^0-9])

    let movieName = "2001: A Space Odyssey";
    let noNumRegex = /\D/g; // ищем все, кроме цифр, во всей строке
    let result = movieName.match(noNumRegex).length;
    
20. \s означает поиск пробелов, табуляции, символов новой строки, символов возврата каретки и form feed

    let whiteSpace = "Whitespace. Whitespace everywhere!"
    let spaceRegex = /\s/g; 
    whiteSpace.match(spaceRegex); //вернет [" ", " "]

21. \S исключает пробелы из поиска по строке

    let whiteSpace = "Whitespace. Whitespace everywhere!"
    let nonSpaceRegex = /\S/g;
    whiteSpace.match(nonSpaceRegex).length;

22. Можно указать длину поискового паттерна с помощью {}. Например, {3, 5} означает, что длина паттерна может быть от 3 до 5 символов.
    

    let A4 = "aaaah";
    let A2 = "aah";
    let multipleA = /a{3,5}h/;
    multipleA.test(A4); //true
    multipleA.test(A2); //false

23. Можно также указать только нижнюю границу длины {3,}

    let A4 = "haaaah";
    let A2 = "haah";
    let A100 = "h" + "a".repeat(100) + "h";
    let multipleA = /ha{3,}h/;
    multipleA.test(A4); //true
    multipleA.test(A2); //false
    multipleA.test(A100); //true

24. Можно указать конкретную длину поискового паттерна, а не диапазон: {3}

    let A4 = "haaaah";
    let A3 = "haaah";
    let A100 = "h" + "a".repeat(100) + "h";
    let multipleHA = /ha{3}h/;
    multipleHA.test(A4); //false
    multipleHA.test(A3); //true
    multipleHA.test(A100); //false

25. Символ ? также проверяет вхождение предыдущего символа 0 или 1 раз

    let american = "color";
    let british = "colour";
    let rainbowRegex= /colou?r/;
    rainbowRegex.test(american); //true
    rainbowRegex.test(british); //true


26. ?=... проверяет на вхождение паттерн, заданный в многоточии [...], но не возвращает его в match. ?!... проверяет на отсутствие вхождения паттерна аналогичным образом.

     let quit = "qu";
    let noquit = "qt";
    let quRegex= /q(?=u)/;
    let qRegex = /q(?!u)/;
    quit.match(quRegex); //returns q
    noquit.match(qRegex); //returns q

    Это выражение проверяет длину пароля от 3 до 6 символов и как минимум 1 цифру
    let password = "abc123";
    let checkPass = /(?=\w{3,6})(?=\D*\d)/;
    checkPass.test(password);

27. Чтобы проверить на вхождение какие-то группы символов, используются круглые скобки ()

    let testStr = "Pumpkin";
    let testRegex = /P(engu|umpk)in/;
    testRegex.test(testStr); //true

28. Для поиска повторяющихся паттернов используют capture groups. Повторяющуюся подстроку заключают в круглые скобки (). Там, где подстрока будет повторяться, ставится \1, где 1 - порядковый номер capture group. Отсчет идет с единицы

    let repeatStr = "regex regex";
    let repeatRegex = /(\w+)\s\1/;
    repeatRegex.test(repeatStr); //true
    repeatStr.match(repeatRegex); //returns ["regex regex", "regex"], массив из совпадения и самой capture group.

29. Поиск в комбинации с заменой используется в методе .replace()

    let wrongText = "The sky is silver.";
    let silverRegex = /silver/;
    wrongText.replace(silverRegex, "blue"); //returns The sky is blue.

    Capture groups при замене обозначаются с использованием знака $

    "Code Camp".replace(/(\w+)\s(\w+)/, '$2 $1'); //returns Camp Code



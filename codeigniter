1) install "xampp apache+mariaDB+PHP+Perl" at apachefriend.com
2) install composer
3) go to xampp/htdocs, open powershell or cmd and follow the steps from CodeIgnite Documentation\Composer installation with the project name of first ci4
4) to run theproject, start apache from xampp and mysql server
5) open in IDE the project folder, in public find index.php. This is where CodeIgniter instantiates all the required system files. The las line says
 $app->run();
We don't touch public folder, we don't add PHP files or edit index.php. We only add assets files - like .js, .css and images 
6) env file is by itself doing nothing. For every new project we have to duplicate it (right-click and duplicate), and rename the double as .env. This is a configuration file for our project. 
Uncomment the CI_ENVIRONMENT = production line. Uncommenting the line allows us to start the debug mode and see all errors we get during development, and also change the mode to dev:
 CI_ENVIRONMENT = development.
Next, uncomment the line 
 app_baseURL=''
and set it to
 app_baseURL = 'http://localhost'
 
The DATABASE section has 2 groups: a default group and testing group. The testing group is used for running PHP unit tests.

7) The writable folder is used by CodeIgniter to store dynamic files like session files or log files or caching files. We don't edit anything manually here and the same goes for tests folder. Vendor folder keeps the libraries needed for CodeIgnite and we don't edit anything there. 
8) Inside the app folder we have some subdirs. In Config subdir are files which allow to config libraries provided by codeigniter. File Routes.php in Config folder takes care about the routes of the app. For example, the default controller is set to Home, so the homepage of a codeigniter project starts the Home controller:
$routes->setDefaultController('Home');

And if we go to Controller folder, we'll see Home.php file. If we open it, we'll see a public function index() returning a view:
public function index() {
 return view('welcome_message');
}

And if we open the views folder, we can see the welcome_message.php file.
So the default controller is Home and its default method is index. It means that http://localhost, http://localhost/home, http://localhost/home/index are pointing at the same view. So for routing you should specify a controller, then specify a method and then specify a view.

A method in controller can also refer to model and get some data from there and apss this data to the view. Models are in Model dir 

9) Let's create a controller. In app\Controllers create a Shop.php file. 

 Shop.php:
 
 <?php namespace App\Controllers;

 class Shop extends BaseController //the naming of class always begins with capitalized letter, others are small.
 {
  public function index() { we get to this function via localhost/shop
   return view('shop');
  }
  
  public function product() { we get to this function via localhost/shop/product
   return view('product');
  }
 }
 ?>
 
In views folder create a shop.php  and a product.php files.

shop.php:

<h2>This is a shop</h2>


product.php:

<h2>This is a product</h2>


To get to localhost/product/shop/laptop for example, we have to make our product view dynamic.

 Shop.php:
 
 <?php namespace App\Controllers;

 class Shop extends BaseController //the naming of class always begins with capitalized letter, others are small.
 {
  public function index() { we get to this function via localhost/shop
   return view('shop');
  }
  
  public function product($type, $product_id) { //pass a variable 
  
   echo '<h2>This is a product: '.$type.' with id of '.$product_id.'</h2>'; //if we go to localhost/shop/product/laptop/24, $type = 'laptop', $product_id = 24
   return view('product');
  }
  
  protected function adminChecks() { //protected methods are not allowed by automatic routing of codeigniter so localhost/shop/adminchecks will result in 404.
   echo 'This is a protected area';
  }
 }


10) Go to Controllers folder and create a new dir called Admin and cope Shop.php there. If you try to get to localhost/admin/shop.php you'll get an error because of namespace. Fix the namespace and use the BaseController:

 Admin\Shop.php:
 
 <?php namespace App\Controllers\Admin;
 
 use App\Controllers\BaseController;

 class Shop extends BaseController //the naming of class always begins with capitalized letter, others are small.
 {
  public function index() { we get to this function via localhost/admin/shop
   return view('shop');
  }
  
  public function product($type, $product_id) { //pass a variable 
  
   echo '<h2>This is a product: '.$type.' with id of '.$product_id.'</h2>'; //if we go to localhost/admin/shop/product/laptop/24, $type = 'laptop', $product_id = 24
   return view('product');
  }
  
 }
 
 
11) Let's try and use a controller inside another controller. In Home.php:

<?php namespace App\Controllers;

use App\Controllers\Admin\Shop as AdminShop; //we tell the controller to look for this special controller at Admin folder with an alias so it will stay unique

class Home extends BaseController {
 public function index() {
  return view('welcome_message');
 }
 
 function validation() {
  $shop = new Shop(); //we create a new instance of Shop controller
  echo $shop->product('laptop', 'lenovo') //and call its method product with product parameter = laptop and id = lenovo
  
  $adminShop = new AdminShop(); //creatae a new instance of AdminShop controller
 }
}


11) Let's talk about routes. Go to App\Config\Routes.php. We can see some default prerequisites here. Like, by default, codeigniter takes controller name and then method name, like localhost/shop/product. To shorten the URL to localhost/product, add in Routes.php this line:

$routes->add('products/(:any)/(:any)', 'Shop::product/$1/$2') //first argument is the url address, second is the method calling it. We also pass some dynamic arguments to the URL using regexp so we can just type in localhost/product/pc/dell.

We can also create our own routes in a much alike way.

$routes->add('blog', function() { //same here - the address and the method
 return "<h2>Blog here</h2>";
});

12) This is how we make groups of routes for subdirectories. In Admin dir let's create a Users.php file. 

Admin\Users.php:
 
 <?php namespace App\Controllers\Admin;
 
 use App\Controllers\BaseController;

 class Users extends BaseController 
 {
  public function index() { 
   echo '<h2>Admin\Users here!</h2>'
  }
  
  public function getAllUsers() {  
  
   echo '<h2>Show all users</h2>'; 
  }
  
 }
 
 In Routes.php:
 
 $routes->group('admin', function($routes) { //group stands for the admin prefix, so all routes here will have /admin/in front of them
  $routes->add('users', 'Admin\Users::getAllUsers');
  $routes->add('user', 'Admin\Users::index');
  $routes->add('product/(:any)/(:any)', 'Admin\Shop::product/$1/$2s');
 })

 13) Let's make a route for POST or PUT/PATCH/DELETE. In Admin create a Blog.php file
 
 Admin\Blog.php:
 
 <?php namespace App\Controllers\Admin;
 
 use App\Controllers\BaseController;

 class Blog extends BaseController 
 {
  public function index() { 
   echo '<h2>A list of blog posts</h2>'
  }
  
  public function createNew() {  
   return view('blog_form');
  }
  
  public function saveBlog() {  
   echo '<pre>'
    print_r($_POST);
   echo '</pre>
  }
  
 }

 In views folder create a blog_form.php file.
 
 blog_form.php:
 
 <form action="admin/blog/new" method="post">
  <input type="text" name="title">
  <textarea name="content></textarea>
  <input type="submit" value="Create>
 </form>
 
 
Routes.php:

 $routes->group('admin', function($routes) { //group stands for the admin prefix, so all routes here will have /admin/in front of them
  $routes->add('users', 'Admin\Users::getAllUsers');
  $routes->add('user', 'Admin\Users::index');
  $routes->add('product/(:any)/(:any)', 'Admin\Shop::product/$1/$2s');
  
  //blog routes
  $routes->add('blog', Admin\Blog::index);
  $routes->get('blog/new', Admin\Blog::createNew); 
  $routes->post('blog/new', Admin\Blog::saveBlog);
 })
 
 
14) Let's stick to views now. At the moment, create a Blog.php in Controllers folder.

Blog.php:
 
 <?php namespace App\Controllers;

 class Blog extends BaseController 
 {
  public function index() { 
   return view('blog');
  }
  
  public function post() {
   return view('single_post');
  }
 }

In views, create a blog.php, single_post.php file.

blog.php, single_post.php:

<!DOCTYPE html>
<--!default html dummy here-->

In Routes.php remove the blog route so it will act in a default way and return the blog.php view.

15) In case we would like to have some menu for our blog, it would be wise to setup the routing in a way we don't have to put the menu to all pages of the blog. In views folder. let's split the files in three:

header.php:
<!DOCTYPE html>
<html>
 <head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><?= (isset($meta_title) : $meta_title ? 'Codeigniter default title') ?></title> //dynamic data from Blog.php
 </head>
 <body>
  <nav>
   <ul>
    <li><a href="/blog">Blog</a></li>
    <li><a href="/blog/post">Post</a></li>
   </ul>
  </nav>

  
blog.php:

<h1><?= $title ?></h1>

<div>
 <?php foreach ($posts as $post) : ?>
    <div>
     <h3><?= $post ?></h3>
     <img src="/assets/images/avatar.jpg">
     <p>Lorem ipsum</p>
    </div>
 <?php endforeach; ?>
</div>

footer.php:
</body>
</html>

single_post.php:

<h1>This is a single post page</h1>

Controllers\Blog.php:

 <?php namespace App\Controllers;

 class Blog extends BaseController 
 {
  public function index() {
   $data = [
    'meta_title' => 'Codeigniter 4 Blog',
    'title' => 'This is a Blog Page'
   ]
   
   $posts = ['Title1', 'Title2', 'Title3'];
   $data['posts'] = $posts;
   
   echo view('header', $data);
   echo view('blog');
   echo view('footer');
  }
  
  public function post() {
  
   $data = [
    'meta_title' => 'Codeigniter 4 Blog',
    'title' => 'This is an Awesome Blog'
   ]
  
   echo view('header', $data);
   echo view('single_post');
   echo view('footer');
  }
 }
 

16) In views folder create a template dir and put header.php and footer.php there. Now in Blog.php controller we have to specify the path to header and footer:

Controllers\Blog.php:

 <?php namespace App\Controllers;

 class Blog extends BaseController 
 {
  public function index() {
   $data = [
    'meta_title' => 'Codeigniter 4 Blog',
    'title' => 'This is a Blog Page'
   ]
   
   $posts = ['Title1', 'Title2', 'Title3'];
   $data['posts'] = $posts;
   
   echo view('template/header', $data);
   echo view('blog');
   echo view('template/footer');
  }
  
  public function post() {
  
   $data = [
    'meta_title' => 'Codeigniter 4 Blog',
    'title' => 'This is an Awesome Blog'
   ]
  
   echo view('template/header', $data);
   echo view('single_post');
   echo view('template/footer');
  }
 }

 
17) To brush the views up we'll use bootstrap. Install it as described in documentation page, add the css file to header.php, and js file to footer.php, and set the navbar up. In views, create a components folder and a post_item.php file inside. Remove some markup from post.php:

views\components\post_item.php:
    <div>
     <h3><?= $title ?></h3>
     <img src="/assets/images/avatar.jpg">
     <p>Lorem ipsum</p>
    </div>


views\blog.php:

<h1><?= $title ?></h1>

<div>
 <?php foreach ($posts as $post) : ?>
	<?php view_cell('\App\Libraries\Blog::postItem', ['title' => $post]) ?> \\the path to library which will render this cell
 <?php endforeach; ?>
</div>
 
Let's create the libary file. Go to App\Libraries and create a file named Blog.php

App\Libraries\Blog.php:

<?php namespace App\Libraries;

class Blog() {
 public function postItem($params) {
  return view('components/post_item.php', $params);
 }
}

18) At the moment we are echoing template files for each view in our controller. But the better way to do it is using view layouts. In Views, create a Layouts folder and main.php file in it. Copy and paste the contents of header.php and footer.php to main.php. 

Views\Layouts\main.php:


 <!DOCTYPE html>
<html>
 <head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><?= (isset($meta_title) : $meta_title ? 'Codeigniter default title') ?></title> //dynamic data from Blog.php
 </head>
 <body>
  <nav>
   <ul>
    <li><a href="/blog">Blog</a></li>
    <li><a href="/blog/post">Post</a></li>
   </ul>
  </nav>
  
   <div class="container">
    <?= $this->renderSection('content') ?> //the content section renders here
   </div>
 
 </body>
</html>


App\Controllers\Blog.php:

 <?php namespace App\Controllers;

 class Blog extends BaseController 
 {
  public function index() {
   $data = [
    'meta_title' => 'Codeigniter 4 Blog',
    'title' => 'This is a Blog Page'
   ]
   
   $posts = ['Title1', 'Title2', 'Title3'];
   $data['posts'] = $posts;
   
   return view('blog', $data);
  }
  
  public function post() {
  
   $data = [
    'meta_title' => 'Codeigniter 4 Blog',
    'title' => 'This is an Awesome Blog'
   ]
  
   return view('single_post, $data');
  }
 }
 

Views\blog.php:

<?= $this->extend('Layouts/main') ?>

<?= $this->section('content') ?> //section begins. The name in parentheses should match the one in the layout which is 'content' in this case.

<h1><?= $title ?></h1>

<div class="row">
  <?= $this->include('partials/sidebar') ?> //include sidebar
 <div class="col-12 col-sm-9">
  <div class="row>
	<?php foreach ($posts as $post) : ?>
		<?php view_cell('\App\Libraries\Blog::postItem', ['title' => $post]) ?> //the path to library which will render this cell
	<?php endforeach; ?>
  </div>
 </div>
</div>

<?= $this->endSection() ?> //section rendered to layout ends

19) Another moment regarding layout. Let's say the blog has a sidebar. Create in Views a folder named partials, and a file sidebar.php. 

Views\partials\sidebar.php:
<div class="col-12 col-sm-3">
<ul>
 <li>One</li>
 <li>One</li>
 <li>One</li> 
</ul> 
</div>


20) CodeIgniter provides us with 2 types of models. The first type is model type which extends an existing model class, and the second type is independent model created by ourselves and it can be structured in any way we like. Go to App\Models and create a new file called BlogModel.php. Paste the code from documentation of CodeIgniter.

App\Models\BlogModel.php:

<?php namespace App\Models;

use CodeIgniter\Model;

class BlogModel extends Model {
 protected $table = 'posts'; \\required parameter for the model to function
 protected $primaryKey = 'post_id'; \\required
 
 protected $returnType = 'array';
 protected $useSoftDeletes = true;
 
 protected $allowedFields = ['post_title', 'post_content']; \\required. These fields can be updated from the users form
 
 protected $useTimestamps = false;
 protected $createdField = 'created_at';
 protected $updatedField = 'updated_at';
 protected $deletedField = 'deleted_at';
 
 protected $validationRules = [];
 protected $validationMessages = [];
 protected $skipValidation = false;
 
}

Some fields are generated automatically, like primary key, others are put in manually, the are in the $allowedFields array.


Now in App\Controllers\Blog.php:

<?php namespace App\Controllers;

 use App\Models\BlogModel;

 class Blog extends BaseController 
 {
  public function index() {
   $data = [
    'meta_title' => 'Codeigniter 4 Blog',
    'title' => 'This is a Blog Page'
   ]
   
   $posts = ['Title1', 'Title2', 'Title3'];
   $data['posts'] = $posts;
   
   return view('blog', $data);
  }
  
  public function post($id) {
   
   $model = new BlogModel(); \\creta a new instance of model
   $post = $model->find($id); 
   if($post) {
       $data = [
        'meta_title' => $post['post_title'],
        'title' => $post['post_title'],
        'post' => $post
       ];
   } else {
       $data = [
        'meta_title' => 'Post not found',
        'title' => 'Post not found',
       ];
   }
 

  
   return view('single_post, $data');
  }

  public function new() {

   $data = [
    'meta_title' => 'New Post',
    'title' => 'Create New Post'
   ]

   if($this->request->getMethod() == 'post') { \\if the form in new_post.php is submitted
     $model = new BlogModel(); \\call a new instance of BlogModel
     $model->save($_POST); \\and save data from the post to this instance
   } 
   return view('new_post', $data);
  }

  public function delete($id) {
      
   $model = new BlogModel(); \\creta a new instance of model
   $post = $model->find($id); 
   
   if($post) {
     $model->delete($id);
     return redirect()->to('/blog');
   }
  }

  public function edit($id) {
   
   $model = new BlogModel(); \\creta a new instance of model
   $post = $model->find($id); 

   $data = [
    'meta_title' => $post['post_title'],
    'title' => $post['post_title'],
   ]

   if($this->request->getMethod() == 'post') { \\if the form in new_post.php is submitted
     $model = new BlogModel(); \\call a new instance of BlogModel
     $_POST['post_id'] = $id;
     $model->save($_POST); \\using save method for editing data you must pass primary key
     $post = $model->find($id);  
   }

   $data['post'] = $post; 
   return view('edit_post', $data);
  }
 }

In Views, create a file new_post.php

new_post.php:


<?= $this->extend('Layouts/main') ?>

<?= $this->section('content') ?> //section begins. The name in parentheses should match the one in the layout which is 'content' in this case.

<h1><?= $title ?></h1>

<div class="row">
 <div class="col-12 col-md-8 offset-md-2">
  <form method="post" action="/blog/new">
   <div class="form-group">
    <label for="">Title</label>
    <input id="" class="form-control" type="text" name="post_title">
   </div>
   <div class="form-group">
    <label for="">Content</label>
    <textarea id="" class="form-control" name="post_content" rows="3"></textarea>
   </div>
   <div class="form-group">
    <button class="btn btn-success btn-sm">Create</button>
   </div>
  </form>
 </div>
</div>

<?= $this->endSection() ?> //section rendered to layout ends

21) Before managing the database we must create a database first. <SOLVE TH PROBLEM> and its structure. When created, make changes to the .env file. Uncomment the default database group and set the values as they should be.
Fix the singe_post.php in View:

<?= $this->extend('layouts/main') ?>

<?= $this->section('content') ?>
<h1><?= title ?></h1>
<a href="/blog/delete/<?= $post['post_id']" class="btn btn-danger">Delete</a>
<a href="/blog/edit/<?= $post['post_id']" class="btn btn-danger">Edit</a>
<?= $this->endSection() ?>

22) In views, create an edit_post.php

edit_post.php:


<?= $this->extend('Layouts/main') ?>

<?= $this->section('content') ?> //section begins. The name in parentheses should match the one in the layout which is 'content' in this case.

<h1><?= $title ?></h1>

<div class="row">
 <div class="col-12 col-md-8 offset-md-2">
  <form method="post"> \\the form will submit to itself
   <div class="form-group">
    <label for="">Title</label>
    <input id="" class="form-control" type="text" name="<?= $post['post_title'] ?>" value="post_title">
   </div>
   <div class="form-group">
    <label for="">Content</label>
    <textarea id="" class="form-control" name="post_content" rows="3"><?= $post['post_title'] ?></textarea>
   </div>
   <div class="form-group">
    <button class="btn btn-success btn-sm">Create</button>
   </div>
  </form>
 </div>
</div>

<?= $this->endSection() ?> //section rendered to layout ends

23) Another useful feature of CodeIgniter model is model events. 


App\Models\BlogModel.php:

<?php namespace App\Models;

use CodeIgniter\Model;

class BlogModel extends Model {
 protected $table = 'posts'; \\required parameter for the model to function
 protected $primaryKey = 'post_id'; \\required
 
 protected $returnType = 'array';
 protected $useSoftDeletes = true;
 
 protected $allowedFields = ['post_title', 'post_content']; \\required. These fields can be updated from the users form
 
 protected $useTimestamps = false;
 protected $createdField = 'created_at';
 protected $updatedField = 'updated_at';
 protected $deletedField = 'deleted_at';
 
 protected $validationRules = [];
 protected $validationMessages = [];
 protected $skipValidation = false;
 
 protected $beforeInsert = ['checkName']; \\event calling checkname function

 public function checkName(array $data) { \\available data
   $newTitle = $data['data']['post_title'].' Extra features';
   $data['data']['post_title'] = $newTitle;

   return $data;
 }
}

Other events are: afterInsert, beforeInsert, beforeUpdate, afterUpdate, afterFind, afterDelete.

24) Let's create a custom model. In App\Models create a file named CustomModel.php:

<?php namespace App\Models;

use CodeIgniter\Database\ConnectionInterface;

class CustomModel {

  protected $db;
  
  public function __construct(ConnectionInterface &$db){
   $this->db =& $db;
  }

  function getPosts(){
   $builder = $this->db->table('posts');
   $builder->join('users', 'posts.post_author_id = users.user_id')
   $posts = $builder->get()->getResult();
   return $posts;
  }
}


App\Controllers\Blog.php:

<?php namespace App\Controllers;

 use App\Models\BlogModel;
 use App\Models\CustomModel;

 class Blog extends BaseController 
 {
  public function index() {

   $db = db_connect();

   $model = new CustomModel();
   echo '<pre>';
     print_r($model->getPosts());
   echo '</pre>;
   $data = [
    'meta_title' => 'Codeigniter 4 Blog',
    'title' => 'This is a Blog Page'
   ]
   
   $posts = ['Title1', 'Title2', 'Title3'];
   $data['posts'] = $posts;
   
   return view('blog', $data);
  }
  
  public function post($id) {
   
   $model = new BlogModel(); \\creta a new instance of model
   $post = $model->find($id); 
   if($post) {
       $data = [
        'meta_title' => $post['post_title'],
        'title' => $post['post_title'],
        'post' => $post
       ];
   } else {
       $data = [
        'meta_title' => 'Post not found',
        'title' => 'Post not found',
       ];
   }
 

  
   return view('single_post, $data');
  }

  public function new() {

   $data = [
    'meta_title' => 'New Post',
    'title' => 'Create New Post'
   ]

   if($this->request->getMethod() == 'post') { \\if the form in new_post.php is submitted
     $model = new BlogModel(); \\call a new instance of BlogModel
     $model->save($_POST); \\and save data from the post to this instance
   } 
   return view('new_post', $data);
  }

  public function delete($id) {
      
   $model = new BlogModel(); \\creta a new instance of model
   $post = $model->find($id); 
   
   if($post) {
     $model->delete($id);
     return redirect()->to('/blog');
   }
  }

  public function edit($id) {
   
   $model = new BlogModel(); \\creta a new instance of model
   $post = $model->find($id); 

   $data = [
    'meta_title' => $post['post_title'],
    'title' => $post['post_title'],
   ]

   if($this->request->getMethod() == 'post') { \\if the form in new_post.php is submitted
     $model = new BlogModel(); \\call a new instance of BlogModel
     $_POST['post_id'] = $id;
     $model->save($_POST); \\using save method for editing data you must pass primary key
     $post = $model->find($id);  
   }

   $data['post'] = $post; 
   return view('edit_post', $data);
  }
 }

25) Query Builder. While extending models supportt only few CRUD features, custom models let us use query builder class.
Let's fill in some data using dummySQL  and export our db. In the resulting .sql file remove the INSERT query. 
...
When the database is filled, fo to App\Controllers\Posts.php:

<?php namespace App\Controllers;

use App\Models\CustomModel;

class Posts extends BaseController
{
 public function index()
 {
   $db = db_connect();
   $model = new CustomModel($db);
   $result = $model->all(); \\call specific method

   echo '<pre>';
    print_r($result);
   echo '</pre>'; \\call the array
 }

 public function where()
 {
   $db = db_connect();
   $model = new CustomModel($db);
   $result = $model->where(); \\call specific method

   echo '<pre>';
    print_r($result);
   echo '</pre>'; \\call the array
 }

 public function join()
 {
   $db = db_connect();
   $model = new CustomModel($db);
   $result = $model->join(); \\call specific method

   echo '<pre>';
    print_r($result);
   echo '</pre>'; \\call the array
 }

 public function like()
 {
   $db = db_connect();
   $model = new CustomModel($db);
   $result = $model->like(); \\call specific method

   echo '<pre>';
    print_r($result);
   echo '</pre>'; \\call the array
 }

 public function grouping()
 {
   $db = db_connect();
   $model = new CustomModel($db);
   $result = $model->grouping(); \\call specific method

   echo '<pre>';
    print_r($result);
   echo '</pre>'; \\call the array
 }
} 


App\Models\CustomModel.php:

<?php namespace App\Models;

use CodeIgniter\Database\ConnectionInterface;

class CustomModel {

  protected $db;
  
  public function __construct(ConnectionInterface &$db){
   $this->db =& $db;
  }

  function all(){ //get all data
   //we get "SELECT * FROM posts" this way
   
   return $this->db->table('posts')->get()->getResult(); \\get all the data from posts table
   
  }

  function where(){ //get some data
   //we get "SELECT * FROM posts" this way
   
   return $this->db->table('posts')->where(['post_id' => 100])->get()->getResult(); \\get all the data from posts table
 
 \\if we use getRow instead of getResult, we'll get back a class object, not an array of objects

   return $this->db->table('posts')->where(['post_id > ' => 90])->where(['post_id <' => 95])->orderBy(['post_id', 'DESC'])->get()->getRow(); \\get biggest post_id where post_id > 90 and < 95
   
  }

  function join(){ //get some data
    return $this->$db->table('posts')->where('post_id >', 50 )->where('post_id >', 60 )->join('users', 'posts.post_author = users.user_id' )->get()->getResult();
   
  }

  function like(){ //get some data
    return $this->$db->table('posts')->like('post_content >', 'new', 'both' )->join('users', 'posts.post_author = users.user_id' )->get()->getResult();
   
  }

  function grouping(){ //get some data
    //SELECT * FROM posts WHERE (post_id = 25 AND post_date < '1990-01-01 00:00:00') OR (post_author = 10);
    return $this->$db->table('posts')->groupStart()->where(['post_id' => '25', 'post_created_at <' => '1990-01-01 00:00:00'])->groupEnd()->orWhere('post_author', 10)->like('post_content >', 'new', 'both' )->join('users', 'posts.post_author = users.user_id' )->get()->getResult();
   
  }

  function wherein(){ //get some data
    //SELECT * FROM posts WHERE (post_id = 25 AND post_date < '1990-01-01 00:00:00') OR (post_author = 10);
    $emails = ['1@email.com', '2@email.com']; \\an array od emails passed to the query
    
    return $this->$db->table('posts')->groupStart()->where(['post_id' => '25', 'post_created_at <' => '1990-01-01 00:00:00'])->groupEnd()->orWhereIn('email', $emails)->like('post_content >', 'new', 'both' )->join('users', 'posts.post_author = users.user_id' )->limit(5)->get()->getResult();
   
  }



  function getPosts(){
   $builder = $this->db->table('posts');
   $builder->join('users', 'posts.post_author_id = users.user_id')
   $posts = $builder->get()->getResult();
   return $posts;
  }
}

When building a query, if you make a query without ending with get and start another query, these two will unite!


26) Form validation
Create in App\Controllers a Form.php file:

Form.php:

<?php namespace App\Controllers;

class Form extends BaseController
{
 public function index()
 {
   helper(['form']); \\load validation library form helper 
   
   $data = [];
   $data['categories'] = [
    'Student',
    'Teacher',
    'Principle'
   ];



   if($this->request->getMethod() == 'post') { \\when we submit a form we have a post request
    
   $rules = [ \\create a set of preset rules
     'email' => 'required|valid_email',
     'password' => 'required|min_length[8]',
     'category' => 'in_list[Student, Teacher]' \\is in category
     'date' => [ \\custom validation rule
       'rules' => 'required|check_date',
       'label' => 'Date', \\name for the set of rules
       'errors' => [
         'required' => 'This field is required!' \\the error text for a rule
       ]
     ]
   ];


    if($this->validate($rules)) {
     //then do database insertion and login user
     return redirect()->to('/form/success');
    } else {
     $data['validation'] = $this->validator; \\provides a list of errors
    }
   }

   return view('form', $data);
 }

 function success(){
  return "You've passed";
 }
}

Create in Views form.php using bootstrap. Include Bootstrap in this file and copy default form from the documentation.

Imagine we have a form of three fields: email, password and a category that the user will be assigned to.

form.php:

...

<h1>Form Validation</h1>
<?php if(isset($validation)) : ?>
  <div class="text-danger">
   <?= $validation->listErrors() ?>
  </div>
<?php endif; ?>

...form here...

For custom validation rules create in App a folder called Validations

App\Validations\CustomRules.php:

<?php 

 namespace App\Validations;

 class CustomRules{ \\rules always return boolean value
  function check_date(string $str, string &$error = null) : bool
  {
    if($str < date('Y-m-d')) {
      return false;
    }
 
    return true;
  }
 }

App\Config\Validation.php:

...
\App\Validations\CustomRules::class \\add custom rule in config


27) File Validation and File Upload
Go to App\Views\form.php and paste a file upload form from Bootstrap docs
In <form enctype="multipart/form-data">. Also in the input of file upload form enter the name:
<input name="theFile">


App\Controllers\Form.php:

<?php namespace App\Controllers;

class Form extends BaseController
{
 public function index()
 {
   helper(['form']); \\load validation library form helper 
   
   $data = [];
   $data['categories'] = [
    'Student',
    'Teacher',
    'Principle'
   ];



   if($this->request->getMethod() == 'post') { \\when we submit a form we have a post request
    
   $rules = [ \\create a set of preset rules
     'email' => 'required|valid_email',
     'password' => 'required|min_length[8]',
     'category' => 'in_list[Student, Teacher]' \\is in category
     'date' => [ \\custom validation rule
       'rules' => 'required|check_date',
       'label' => 'Date', \\name for the set of rules
       'errors' => [
         'required' => 'This field is required!' \\the error text for a rule
       ]
     ],
     'theFile' => [ \\rules for theFile input
       'rules' => 'uploaded[theFile]|max_size[theFile, 50]|ext_in[theFile,jpg]|is_image|max_dims[theFile,100,50]', \\upload required, size in Kb, jpg extension only (without space after comma), is_image allows only upload images, max_dims limits the width and height of image. The first parameter is always the name of the form.
       'label' => 'The File'
     ]
   ];


    if($this->validate($rules)) {
     
     $file = $this->request->getFile('theFile'); \\get file uploaded from the form
     if($file->isValid() && !$file->hasMoved()) {
      $file->move('./uploads/images', 'testName'.$file->getExtension()); \\upload the file to this folder on server, the second parameter renames the file
     }

     echo $file->getName(); \\return the name of uploaded file
     exit();
    
     //then do database insertion and login user
     return redirect()->to('/form/success');
    } else {
     $data['validation'] = $this->validator; \\provides a list of errors
    }
   }

   return view('form', $data);
 }

 function success(){
  return "You've passed";
 }
}

Before uploading a file to the server, CodeIgniter suggests us to run an if statement to check if the file is valid.
To create a random name for files, use $file->getRandomName()

For multiple file validation rules make the input form name an array:
<input name="theFile[]">. Then in rules we have to fix the uploaded rule:

'rules' => 'uploaded[theFile.0]'

For multiple files upload, if rules are validated,

$files = $this->request->getFiles();
foreach($files['theFile'] as $file){
       if($file->isValid() && !$file->hasMoved()) {
      $file->move('./uploads/images', '$file->getRandomName());
     }
}
 
28) Image Manipulation
Go to App\Views and duplicate form.php. Call it image.php and remove all the data but image uploader. In Controllers, do the same and create App\Controllers\Image.php file. 

App\Controllers\Image.php:

<?php namespace App\Controllers;

class Image extends BaseController
{
 public function index()
 {
   helper(['form', 'image']); \\load validation library form helper 
   
   $data = [];


   if($this->request->getMethod() == 'post') { \\when we submit a form we have a post request
    
   $rules = [ \\create a set of preset rules
     'theFile' => [ \\rules for theFile input
       'rules' => 'uploaded[theFile]|is_image|max_dims[theFile,100,50]',
       'label' => 'The File'
     ]
   ];


    if($this->validate($rules)) {

     $path = './uploads/images/manipulated/';      
     
     $files = $this->request->getFile('theFile'); \\get file uploaded from the form
     
     $imageService = service('image'); \\load image manipulation library

    foreach($files['theFile'] as $file) {
     if($file->isValid() && !$file->hasMoved()) {
      $file->move($path); \\upload the file to this folder on server
      $fileName = $file->getName(); \\get the name that the file was stored with
      $data['image'] = $fileName;

      $this->imageManipulation($path, 'thumbs', $fileName, $imageService);
      $data['images']['folders'][] = 'thumbs';

      $this->imageManipulation($path, 'flip', $fileName, $imageService);  
      $data['images']['folders'][] = 'flip';

     }
    }

     echo $file->getName(); \\return the name of uploaded file
     exit();
    
     //then do database insertion and login user
     return redirect()->to('/form/success');
    } else {
     $data['validation'] = $this->validator; \\provides a list of errors
    }
   }

   return view('form', $data);
 }

 private function imageManipulation($path, $folder, $fileName, $imageService) {
    $savePath = $path. '/' . $folder;
 
    if(!file_exists($savePath)) {
      mkdir($savePath, 755); \\ 755 is a default parameter for an uploaded data file
    }

    $imageService->withFile(src($fileName)); \\specifying the initial content we will start with

    switch($folder) {
      case 'thumbs':
        $imageService->fit(150, 150);
        break;
      case 'flip':
        $imageService->flip('horizontal');
        break;
    }

    return $image->save($savePath.'/'.$fileName);
 }
}

Let's create a helper. Fo to App\Helpers and create a file image_helper.php

App\Helpers\image_helper.php:

<?php

 function src($fileName, $type="full") {
   $path = './uploads/images/manipulated'  //path to images

   if($type != 'full')
     $path .= $type.'/';

   return $path . $fileName
 }

<img src="<?= src('fileName.jpg', 'thumbs') ?>"> \\how to call an image

 
?>

App\Views\image.php:

<body>
    <div class="container">
     <h1>Image Manipulation</h1>
     <?php if (isset($validation)) : ?>
       <div class="text-danger">
        <?= $validation=>listErrors() ?>
       </div>
     <?php endif; ?>
     <form method="post" enctype="multipart/form-data">
       <div class="form-group">
        <label for="exampleFormControlFile1">Upload File</label>
        <input type="file" multiple name="theFile[]" class="form-control-file" id="exampleInput">
       </div>
       <button type="submit" class="btn btn-primary">Submit</button>
     </form>

     <?php if(isset($image)) : ?>
        <div class="row">
         <?php foreach($folders as $folder) : ?>
          <div class="col-md-4">
           <img src="<?= src($image, $folder) ?>" class="img-fluid">
          </div>
         <?php endforeach; ?>
        </div>
     <?php endif; ?>
    </div>
</body>




1) Angular CLI  is the official tool for initializing and working with Angular projects. Install Angular CLI library via cmd:
npm install -g @angular/cli

2) Create an Angular 8 project via cmd:
d: 
ng new angular-example

The CLI will prompt you and ask whether you would like to add Angular routing. Say Yes. It'll then ask which stylesheet format you would like to use. Choose CSS.

3)Now, go to your project’s root folder and run the local development server using these commands:
cd angular-example
ng serve

the project will be placed at localhost:4200

4)In this step, we’ll add  HttpClient  to our example project.

Open the  src/app/app.module.ts  file and make the following changes:
a) add httpClientModule
import { HttpClientModule } from '@angular/common/http';
b)   imports: [
    BrowserModule,
    AppRoutingModule
    HttpClientModule	
  ],
  
We simply imported HttpClientModule and included it in the imports array. Now we can use the  HttpClient  service in our Angular project to consume our REST API.

5) Angular apps are made up of components. In this step, we’ll learn how to create a couple of Angular components that compose our UI.

Open a new terminal and run the following command:

d:
cd angular-example
ng g component home

We have four files, all required by our component.

6) Next, generate the about component:

ng g component about

7) open the  src/app/about/about.component.html  file and add the following code:

<p style="padding: 15px;"> This is the about page that describes your app</p>

8)n this step, we’ll learn how to add routing to our example.

Go to the  src/app/app-routing.module.ts  file and add the following routes:

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { AboutComponent } from './about/about.component';


const routes: Routes = [
  { path: '', redirectTo: 'home', pathMatch: 'full'},
  { path: 'home', component: HomeComponent },
  { path: 'about', component: AboutComponent },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

We imported the Angular components and we declared three routes.

The first route is for redirecting the empty path to the home component, so we’ll be automatically redirected to the home page when we first visit the app.

9) In this tutorial step, we’ll learn to set up Angular Material in our project and build our application UI using Material components.

Go to your terminal and run this command from the root of your project:

d:
cd angular-example 
ng add @angular/material

You’ll be prompted to choose the theme, so let’s pick Indigo/Pink.

For the other questions - whether you want to set up HammerJS for gesture recognition and if you want to set up browser animations for Angular Material - press Enter to use the default answers. NgMaterial modules are in subdirs of module folder and should be written correspondingly while importing modules.

10) Open the  src/app/app.module.ts  file and add the following imports:
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HttpClientModule } from '@angular/common/http';
import { HomeComponent } from './home/home.component';
import { AboutComponent } from './about/about.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatToolbarModule} from '@angular/material/toolbar';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatCardModule } from '@angular/material/card';


We imported the modules for these Material Design components:

    MatToolbar that provides a container for headers, titles, or actions.
    MatCard that provides a content container for text, photos, and actions in the context of a single subject.
    MatButton that provides a native  <button>  or  <a>  element enhanced with Material Design styling and ink ripples.
    MatProgressSpinner that provides a circular indicator of progress and activity.

11) Still in the same file, add these modules to the  imports  array:
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    BrowserAnimationsModule,
    MatToolbarModule,
    MatIconModule,
    MatButtonModule,
    MatCardModule,
    MatProgressSpinnerModule
  ],
  
12) Open the src/app/app.component.html  file and update it as follows:
  
  <mat-toolbar color="primary">  
	<h1>  
	My Angular Store  
	</h1>  
	<button mat-button routerLink="/">Home</button>  
	<button mat-button routerLink="/about">About</button></mat-toolbar><router-outlet></router-outlet>

We added a top navigation bar with two buttons that take us to the home and about pages, respectively.

13) Go to a new command-line interface and start by installing  json-server  from npm in your project:
	d:
	cd angular-example
	npm install --save json-server

14) Create a  server  folder in the root folder of your Angular project:
	mkdir server
	
15) In the  server  folder, create a  database.json  file and add the following JSON object:

	{
		"products": []
	}

This JSON file will act as a database for your REST API server. You can simply add some data to be served by your REST API or use Faker.js for automatically generating massive amounts of realistic fake data.

16)Go back to your command-line, navigate back from the  server  folder, and install Faker.js  from npm using the following command:

	cd ..
	npm install faker --save
	
17) create a  generate.js  file in server folder and add the following code:

	var faker = require('faker');

	var database = { products: []};

	for (var i = 1; i<= 300; i++) {
	  database.products.push({
		id: i,
		name: faker.commerce.productName(),
		description: faker.lorem.sentences(),
		price: faker.commerce.price(),
		imageUrl: "https://source.unsplash.com/1600x900/?product",
		quantity: faker.random.number()
	  });
	}

	console.log(JSON.stringify(database));

We first imported faker, and next we defined an object with one empty array for products. Next, we entered a for loop to create 300 fake entries using faker methods like  faker.commerce.productName()  for generating product names. Check all the available methods. Finally we converted the database object to a string and logged it to standard output.

18) Add the  generate  and  server  scripts to the  package.json  file:
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e",
    "generate": "node ./server/generate.js > ./server/database.json",
    "server": "json-server --watch ./server/database.json"
  },

19)Head back to your command-line interface and run the generate script using the following com
	npm run generate
	
20) Finally, run the REST API server by executing the following command:
	npm run server

You can now send HTTP requests to the server just like any typical REST API server. Your server will be available from the  http://localhost:3000/  address.

These are the API endpoints we'll be able to use via our JSON REST API server:

    GET /products  for getting the products
    GET /products/<id>  for getting a single product by id
    POST /products  for creating a new product
    PUT /products/<id>  for updating a product by id
    PATCH /products/<id>  for partially updating a product by id
    DELETE /products/<id>  for deleting a product by id

You can use  _page  and  _limit  parameters to get paginated data. In the  Link header you'll get  first,  prev,  next  and  last  links.

21) Open a new command-line interface and run the following command:
	d:
	cd angular-example
	ng g service api

22) go to the  src/app/api.service.ts  file, import and inject  HttpClient:

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class ApiService {

  private SERVER_URL = "http://localhost:3000";

  constructor(private httpClient: HttpClient) { }
}

We imported and injected the  HttpClient  service and defined the  SERVER_URL variable that contains the address of our REST API server.

23) In the same file, define a  get()  method that sends a GET request to the REST API endpoint:
import { Injectable } from '@angular/core';  
import { HttpClient } from '@angular/common/http';

@Injectable({  
	providedIn: 'root'  
})  
export class ApiService {

	private SERVER_URL = "http://localhost:3000";
	constructor(private httpClient: HttpClient) { }

	public get(){  
		return this.httpClient.get(this.SERVER_URL);  
	}  
}

The method simply invokes the  get()  method of  HttpClient  to send GET requests to the REST API server.

24)we now need to use this service in our home component. Open the src/app/home/home.component.ts  file, and import and inject the data service as follows:

import { Component, OnInit } from '@angular/core';  
import { ApiService } from '../api.service';

@Component({  
	selector: 'app-home',  
	templateUrl: './home.component.html',  
	styleUrls: ['./home.component.css']  
})  
export class HomeComponent implements OnInit {
	products = [];
	constructor(private apiService: ApiService) { }
	ngOnInit() {
		this.apiService.get().subscribe((data: any[])=>{  
			console.log(data);  
			this.products = data;  
		})  
	}
}

We imported and injected  ApiService.  Next, we defined a  products  variable and called the  get()  method of the service for fetching data from the JSON REST API server.

25) Next, open the  src/app/home/home.component.html  file and update it as follows:

<div style="padding: 13px;">
    <mat-spinner *ngIf="products.length === 0"></mat-spinner>

    <mat-card *ngFor="let product of products" style="margin-top:10px;">
        <mat-card-header>
            <mat-card-title>{{product.name}}</mat-card-title>
            <mat-card-subtitle>{{product.price}} $/ {{product.quantity}}
            </mat-card-subtitle>
        </mat-card-header>
        <mat-card-content>
            <p>
                {{product.description}}
            </p>
            <img style="height:100%; width: 100%;" src="{{ product.imageUrl }}" />
        </mat-card-content>
        <mat-card-actions>
      <button mat-button> Buy product</button>
    </mat-card-actions>
    </mat-card>
</div>

We used the  <mat-spinner>  component for showing a loading spinner when the length of the  products  array equals zero, that is before any data is received from the REST API server.

Next, we iterated over the  products  array and used a Material card to display the name,  price,  quantity,  description  and  image  of each product.

26) In this step, we’ll learn to add error handling in our example.

Go to the  src/app/api.service.ts  file and update it as follows:

import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from "@angular/common/http";

import {  throwError } from 'rxjs';
import { retry, catchError } from 'rxjs/operators';


@Injectable({
  providedIn: 'root'
})
export class ApiService {

  private SERVER_URL = "http://localhost:3000/products";

  constructor(private httpClient: HttpClient) { }

  handleError(error: HttpErrorResponse) {
    let errorMessage = 'Unknown error!';
    if (error.error instanceof ErrorEvent) {
      // Client-side errors
      errorMessage = `Error: ${error.error.message}`;
    } else {
      // Server-side errors
      errorMessage = `Error Code: ${error.status}\nMessage: ${error.message}`;
    }
    window.alert(errorMessage);
    return throwError(errorMessage);
  }

  public sendGetRequest(){
    return this.httpClient.get(this.SERVER_URL).pipe(catchError(this.handleError));
  }
}

27) In this step, we’ll learn to add support for data pagination using the Link header of the HTTP response received from the REST API server. Open the src/app/data.service.ts file and import the RxJS  tap()  operator:

import { retry, catchError, tap } from 'rxjs/operators';

28) In the same file, add these variables:
public first: string = "";  
public prev: string = "";  
public next: string = "";  
public last: string = "";

29) add the  parseLinkHeader()  method that will be used to parse the Link header and populates the previous variables:

  parseLinkHeader(header) {
    if (header.length == 0) {
      return ;
    }

    let parts = header.split(',');
    var links = {};
    parts.forEach( p => {
      let section = p.split(';');
      var url = section[0].replace(/<(.*)>/, '$1').trim();
      var name = section[1].replace(/rel="(.*)"/, '$1').trim();
      links[name] = url;

    });

    this.first  = links["first"];
    this.last   = links["last"];
    this.prev   = links["prev"];
    this.next   = links["next"]; 
  }

30) update the  sendGetRequest() in api.service.ts  as follows:

  public sendGetRequest(){
    // Add safe, URL encoded _page and _limit parameters 

    return this.httpClient.get(this.SERVER_URL, {  params: new HttpParams({fromString: "_page=1&_limit=20"}), observe: "response"}).pipe(retry(3), catchError(this.handleError), tap(res => {
      console.log(res.headers.get('Link'));
      this.parseLinkHeader(res.headers.get('Link'));
    }));
We added the  observe  option with the  response  value in the options parameter of the  get()  method so we can have the full HTTP response with headers. Next, we use the RxJS  tap()  operator for parsing the Link header before returning the final Observable.

31) Since the  sendGetRequest()  is now returning an Observable with a full HTTP response, we need to update the home component so open the  src/app/home/home.component.ts  file and import  HttpResponse  as follows:

import { HttpResponse } from '@angular/common/http';

  }
  
32) update the  subscribe()  method as follows:

ngOnInit(){

this.apiService.sendGetRequest().pipe(takeUntil(this.destroy$)).subscribe((res: HttpResponse<any>)=>{  
	console.log(res);  
	this.products = res.body;  
})  
}
We can now access the data from the  body  object of the received HTTP response.

33) go back to the src/app/data.service.ts file and add the following method:

public sendGetRequestToUrl(url: string){  
	return this.httpClient.get(url, { observe: "response"}).pipe(retry(3), 			
	catchError(this.handleError), tap(res => {  
		console.log(res.headers.get('Link'));  
		this.parseLinkHeader(res.headers.get('Link'));
	}));  
}

This method is similar to  sendGetRequest()  except that it takes the URL to which we need to send an HTTP GET request.

34) Go back to the  src/app/home/home.component.ts  file and add define the following methods:

 public firstPage() {
    this.products = [];
    this.apiService.sendGetRequestToUrl(this.apiService.first).pipe(takeUntil(this.destroy$)).subscribe((res: HttpResponse<any>) => {
      console.log(res);
      this.products = res.body;
    })
  }
  public previousPage() {

    if (this.apiService.prev !== undefined && this.apiService.prev !== '') {
      this.products = [];
      this.apiService.sendGetRequestToUrl(this.apiService.prev).pipe(takeUntil(this.destroy$)).subscribe((res: HttpResponse<any>) => {
        console.log(res);
        this.products = res.body;
      })
    }

  }
  public nextPage() {
    if (this.apiService.next !== undefined && this.apiService.next !== '') {
      this.products = [];
      this.apiService.sendGetRequestToUrl(this.apiService.next).pipe(takeUntil(this.destroy$)).subscribe((res: HttpResponse<any>) => {
        console.log(res);
        this.products = res.body;
      })
    }
  }
  public lastPage() {
    this.products = [];
    this.apiService.sendGetRequestToUrl(this.apiService.last).pipe(takeUntil(this.destroy$)).subscribe((res: HttpResponse<any>) => {
      console.log(res);
      this.products = res.body;
    })
  }
  
  35) Finally, open the  src/app/home/home.component.html  file and update the template as follows:

<div style="padding: 13px;">
    <mat-spinner *ngIf="products.length === 0"></mat-spinner>

    <mat-card *ngFor="let product of products" style="margin-top:10px;">
        <mat-card-header>
            <mat-card-title>#{{product.id}} {{product.name}}</mat-card-title>
            <mat-card-subtitle>{{product.price}} $/ {{product.quantity}}
            </mat-card-subtitle>
        </mat-card-header>
        <mat-card-content>
            <p>
                {{product.description}}
            </p>
            <img style="height:100%; width: 100%;" src="{{ product.imageUrl }}" />
        </mat-card-content>
        <mat-card-actions>
      <button mat-button> Buy product</button>
    </mat-card-actions>
    </mat-card>

</div>
<div>
    <button (click) ="firstPage()" mat-button> First</button>
    <button (click) ="previousPage()" mat-button> Previous</button>
    <button (click) ="nextPage()" mat-button> Next</button>
    <button (click) ="lastPage()" mat-button> Last</button>
</div>

36) Head back to your command-line interface. Make sure you are inside the root folder of your Angular project and run the following command:

ng add @angular/fire

This will add the Firebase deployment capability to your project.